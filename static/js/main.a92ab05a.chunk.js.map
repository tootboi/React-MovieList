{"version":3,"sources":["reducers/movieReducer.js","contexts/MovieContext.js","components/Navbar.js","components/MovieDetails.js","components/MovieList.js","api/fetchMovie.js","components/MovieForm.js","App.js","serviceWorker.js","index.js"],"names":["movieReducer","state","action","type","title","movie","director","id","uuidv1","filter","MovieContext","createContext","MovieContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","movies","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","MovieDetails","onClick","MovieList","map","key","fetchMovie","query","a","axios","get","params","apikey","t","data","MovieForm","useState","error","setError","setQuery","search","e","preventDefault","Error","document","getElementById","style","display","Title","Director","onSubmit","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a92ab05a.chunk.js","sourcesContent":["import { v1 as uuidv1 } from 'uuid';\r\n\r\nexport const movieReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'ADD_MOVIE':\r\n            return [...state, {\r\n                title: action.movie.title,\r\n                director: action.movie.director,\r\n                id: uuidv1()\r\n             }]\r\n        case 'REMOVE_MOVIE':\r\n            return state.filter(movie => movie.id !== action.id)\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { movieReducer } from '../reducers/movieReducer';\r\n\r\nexport const MovieContext = createContext();\r\n\r\nconst MovieContextProvider = (props) => {\r\n    const [movies, dispatch] = useReducer(movieReducer, [\r\n        \r\n    ], () => {\r\n        const localData = localStorage.getItem('movies');\r\n        return localData ? JSON.parse(localData) : [\r\n            {title: 'Pulp Fiction', director: 'Quentin Tarantino', id: 'unique-id1'},\r\n            {title: 'The Grand Budapest Hotel', director: 'Wes Anderson', id: 'unique-id2'}\r\n        ];\r\n    });\r\n    useEffect(() => {\r\n        localStorage.setItem('movies', JSON.stringify(movies));\r\n    }, [movies]);\r\n    return (\r\n        <MovieContext.Provider value={{movies, dispatch}}>\r\n            {props.children}\r\n        </MovieContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MovieContextProvider;","import React, {useContext} from 'react';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\n\r\nconst Navbar = () => {\r\n    const {movies} = useContext(MovieContext);\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h1>Movies to Watch</h1>\r\n            <p>You have {movies.length} movies to watch.</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Navbar;","import React, {useContext} from 'react';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\n\r\nconst MovieDetails = ({movie}) => {\r\n    const {dispatch} = useContext(MovieContext);\r\n    return (\r\n        <li onClick={() => dispatch({type: 'REMOVE_MOVIE', id: movie.id})}>\r\n            <div className=\"title\">{movie.title}</div>\r\n            <div className=\"director\">{movie.director}</div>\r\n        </li>\r\n    );\r\n}\r\n \r\nexport default MovieDetails;","import React, {useContext} from 'react';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\nimport MovieDetails from './MovieDetails';\r\n\r\nconst MovieList = () => {\r\n    const {movies} = useContext(MovieContext);\r\n    return movies.length ? (\r\n        <div className=\"movie-list\">\r\n            <ul>\r\n                {movies.map(movie => {\r\n                    return (<MovieDetails movie={movie} key={movie.id}/>);\r\n                })}\r\n            </ul>\r\n        </div>\r\n    ) : (\r\n        <div className=\"empty\">No movies to watch</div>\r\n    );\r\n}\r\n \r\nexport default MovieList;","import axios from 'axios';\r\n\r\nconst URL = 'http://www.omdbapi.com/';\r\nconst API_KEY = '746fd547'\r\n\r\nexport const fetchMovie = async (query) => {\r\n    const { data } = await axios.get(URL, {\r\n        params: {\r\n            apikey: API_KEY,\r\n            t: query\r\n        }\r\n    });\r\n\r\n    return data;\r\n}","import React, { useState, useContext } from 'react';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\nimport { fetchMovie } from '../api/fetchMovie';\r\n\r\nconst MovieForm = () => {\r\n    const {dispatch} = useContext(MovieContext);\r\n    const [error, setError] = useState('');\r\n    const [query, setQuery] = useState('');\r\n\r\n    const search = async (e) => {\r\n        e.preventDefault();\r\n        const data = await fetchMovie(query);\r\n        if (data.Error) {\r\n            setError(query);\r\n            document.getElementById('errorOverlay').style.display = 'block';\r\n        } else {\r\n            const title = data.Title;\r\n            const director = data.Director;\r\n            dispatch({type: 'ADD_MOVIE', movie: {title, director}});\r\n        }\r\n        setQuery('');\r\n    }\r\n    const overlayOff = (e) => {\r\n        document.getElementById('errorOverlay').style.display = 'none';\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"overlayContainer\" onClick={overlayOff}>\r\n                <div id=\"errorOverlay\">\r\n                    <div className=\"overlay\">\r\n                        <div className='errorMessage'>\"{error}\" returned no results.</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <form action=\"\" onSubmit={search}>\r\n                <input type=\"text\" placeholder=\"Movie Title\" value={query} \r\n                    onChange={(e) => setQuery(e.target.value)} required/>\r\n                <input type=\"submit\" value=\"search movie\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default MovieForm;","import React from 'react';\r\nimport MovieContextProvider, { MovieContext } from './contexts/MovieContext';\r\nimport Navbar from './components/Navbar';\r\nimport MovieList from './components/MovieList';\r\nimport MovieForm from './components/MovieForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MovieContextProvider>\r\n        <Navbar/>\r\n        <MovieList/>\r\n        <MovieForm/>\r\n      </MovieContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}